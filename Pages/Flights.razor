@page "/flights"
@using Assignment2.Models;
@* Quynh's part' *@

<div class="d-flex flex-row justify-content-evenly">

	<div class="d-flex flex-column">
		<h3>Flights</h3>
			<div class="flights-list">
				<p>@(new MarkupString(flightMessage))</p>
			</div>
	</div>

	<div class="d-flex flex-column align-items-center">
		<h3>Reserve</h3>
		<form class="d-flex flex-column align-items-end">
			<div class="form-group d-flex flex-row align-items-center">
				<label for="flight">Flight: </label> &nbsp
				<input type="text" @bind="selectedInputFlight" class="form-control" id="inputFlight" disabled />
			</div>
			<div class="form-group d-flex flex-row align-items-center">
				<label for="airline">Airline: </label> &nbsp
				<input type="text" @bind="selectedInputAirline" class="form-control" id="inputAirline" disabled />
			</div>
			<div class="form-group d-flex flex-row align-items-center">
				<label for="day">Day: </label> &nbsp
				<input type="text" @bind="selectedInputDay" class="form-control" id="inputDay" disabled />
			</div>
			<div class="form-group d-flex flex-row align-items-center">
				<label for="time">Time: </label> &nbsp
				<input type="text" @bind="selectedInputTime" class="form-control" id="inputTime" disabled />
			</div>
			<div class="form-group d-flex flex-row align-items-center">
				<label for="cost">Cost: </label> &nbsp
				<input type="text" @bind="selectedInputCost" class="form-control" id="inputCost" disabled />
			</div>
			<div class="form-group d-flex flex-row align-items-center">
				<label for="name">Name: </label> &nbsp
				<input type="text" @bind="selectedInputName" class="form-control" id="inputName" />
			</div>
			<div class="form-group d-flex flex-row align-items-center">
				<label for="citizenship">Citizenship: </label> &nbsp
				<input type="text" @bind="selectedInputCitizenship" class="form-control" id="inputCitizenship" />
			</div>
			<div class="form-group d-flex flex-row align-items-center">
				<label for="status">Status: </label> &nbsp
			<select style="width: 220px; padding: 5px">
				<option>Active</option>
				<option>Inactive</option>
			</select>
			</div>
		</form>
		<button type="button" class="btn btn-primary mt-3">Reserve</button>
	</div>

</div>


<div class="d-flex flex-column align-items-center justify-content-center mt-4">
	<h3>Flight Finder</h3>
	<div class="d-flex flex-column align-items-end">
		<div class="d-flex flex-row align-items-center justify-content-center mb-2">
			<div>From: </div> &nbsp;
			<select @onchange="SelectOriginAirport" bind="@originAirportCode" class="form-select" style="min-width:400px;">
				@foreach (var airport in airports)
				{
					<option>@airport.AirportCode</option>
				}
			</select>
		</div>
		<div class="d-flex flex-row align-items-center justify-content-center mb-2">
			<div>To: </div> &nbsp;
			<select @onchange="SelectDestinationAirport" bind="@destinationAirportCode" class="form-select" style="min-width:400px;">
				@foreach (var airport in airports)
				{
					<option>@airport.AirportCode</option>
				}
			</select>
		</div>
		<div class="d-flex flex-row align-items-center justify-content-center mb-2">
			<div>Day: </div> &nbsp;
			<select @onchange="SelectDay" bind="@dayValue" class="form-select" style="min-width:400px;">
				@foreach (var day in days)
				{
					<option value="@day">@day</option>
				}
			</select>
		</div>
	</div>
	<button @onclick="FindFlights" type="button" class="btn btn-primary mt-3" mb-3>Find flights</button>
</div>

@code {
	AirportManager am = new AirportManager();
	List<Airport> airports = AirportManager.GetAirports();

	string originAirportCode = "YYC"; // Default value on loadup
	string destinationAirportCode = "YYC"; // Default value on loadup

	FlightManager fm = new FlightManager();
	List<Flight> flights = FlightManager.GetFlights();
	List<string> days = FlightManager.GetDays();

	string flightMessage = "No flights available from the given filters"; // Default message on loadup
	string dayValue = "Any"; // Default value on loadup
	string selectedInputFlight;
	string selectedInputAirline;
	string selectedInputDay;
	string selectedInputTime;
	double selectedInputCost;
	string selectedInputName;
	string selectedInputCitizenship;

	private void SelectOriginAirport(ChangeEventArgs e)
	{
		originAirportCode = e.Value.ToString();
	}

	private void SelectDestinationAirport(ChangeEventArgs e)
	{
		destinationAirportCode = e.Value.ToString();
	}

	private void FindFlights()
	{

		var filteredFlights = flights.Where(x => x.OriginAirport == originAirportCode && x.DestinationAirport == destinationAirportCode).ToList();
		var filteredDays = flights.Where(x => dayValue == "Any" || x.Day == dayValue).ToList();

		flightMessage = ""; // Reset the list so it doesn't keep infinitely adding

		foreach (var flight in filteredFlights)
		{
			if (filteredFlights.Contains(flight) && filteredDays.Contains(flight))
			{
				flightMessage += flight.ToString() + "<br /><br />";
				selectedInputFlight = flight.FlightCode;
				selectedInputAirline = flight.AirlineName;
				selectedInputDay = flight.Day;
				selectedInputTime = flight.Time;
				selectedInputCost = flight.CostPerSeat;
			}
		}
		if (flightMessage == "")
		{
			flightMessage = "No flights available from the given filters";
		}
	}
	private void SelectDay(ChangeEventArgs e)
	{
		dayValue = e.Value.ToString();
	}
}